import { NextResponse } from 'next/server';
import TelegramBot from 'node-telegram-bot-api';

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ Telegram –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
const bot = process.env.TELEGRAM_BOT_TOKEN 
  ? new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false })
  : null;

export async function POST(request: Request) {
  try {
    const { name, phone, email, message, model } = await request.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram
    const telegramConfigured = Boolean(process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID);
    if (!telegramConfigured) {
      console.error('[API /contact] Telegram is NOT configured: missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID');
      return NextResponse.json(
        { success: false, error: 'Telegram –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', telegram: 'skipped' },
        { status: 500 }
      );
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (HTML –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    const escapeHtml = (value: string | undefined | null) =>
      (value ?? '').toString().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');

    const now = new Date();
    const timeMsk = new Intl.DateTimeFormat('ru-RU', {
      timeZone: 'Europe/Moscow',
      dateStyle: 'short',
      timeStyle: 'medium',
    }).format(now);

    const messageText = `üî• <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê LITTLE BARISTA</b> üî•\n
üë§ <b>–ò–º—è:</b> ${escapeHtml(name)}\n
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${escapeHtml(phone)}\n
‚òï <b>–ú–æ–¥–µ–ª—å:</b> ${escapeHtml(model || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n
üïí <b>–í—Ä–µ–º—è (–ú–°–ö):</b> ${escapeHtml(timeMsk)}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –ª–æ–≥–∞–º–∏
    let telegramStatus: 'sent' | 'skipped' | 'error' = 'skipped';
    if (bot && telegramConfigured) {
      console.log('[API /contact] Telegram: sending to chat', process.env.TELEGRAM_CHAT_ID);
      try {
        const tgMessage = await bot.sendMessage(
          process.env.TELEGRAM_CHAT_ID as string,
          messageText,
          { parse_mode: 'HTML', disable_web_page_preview: true }
        );
        console.log('[API /contact] Telegram: sent OK, message_id =', tgMessage.message_id);
        telegramStatus = 'sent';
      } catch (error) {
        console.error('[API /contact] Telegram: send error ->', error);
        telegramStatus = 'error';
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram', telegram: telegramStatus },
          { status: 500 }
        );
      }
    } else {
      console.warn('[API /contact] Telegram: bot is not initialized');
      return NextResponse.json(
        { success: false, error: 'Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', telegram: 'skipped' },
        { status: 500 }
      );
    }

    // Email-–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å email: 'disabled'
    return NextResponse.json({ success: true, telegram: telegramStatus, email: 'disabled' });
  } catch (error) {
    console.error('Error sending message:', error);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
    if (error instanceof Error) {
      if (error.message.includes('Invalid login')) {
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏' },
          { status: 500 }
        );
      }
      if (error.message.includes('connect')) {
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è' },
          { status: 500 }
        );
      }
    }

    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è' },
      { status: 500 }
    );
  }
} 